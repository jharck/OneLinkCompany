@model PaginatedList<OneLinkCompany.Models.Employee>
@*
@model IEnumerable<OneLinkCompany.Models.Employee>
*@


@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Last Name</a>
                @*
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]">@Html.DisplayNameFor(model => model.LastName)</a>
                *@
                @*
                @Html.DisplayNameFor(model => model.LastName)
                *@
            </th>
            <th>
                First Name
            </th>
            <th>
                Type of Document
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DocumentSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Document #</a>
                @*
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DocumentSortParm"]">@Html.DisplayNameFor(model => model.Document)</a>
                *@
                @*
                @Html.DisplayNameFor(model => model.Document)
                *@
            </th>
            <th>
                Area
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                    @Html.DisplayFor(modelItem => item.FirstMidName)
            </td>
            <td>
                    @Html.DisplayFor(modelItem => item.TypeDoc)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Document)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AreaName)
            </td>
            <td>
                <a asp-action="Edit" class="btn btn-primary" asp-route-id="@item.ID">Edit</a>
                <a asp-action="Details" class="btn btn-info" asp-route-id="@item.ID">Details</a>
                <a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.ID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>